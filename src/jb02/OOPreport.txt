1. OOP(Object Oriented Programming)
	객체지향프로그래밍이란 현실세계를 온라인화하는 방법론이며 현재 및 미래의 프로그래밍 언어의 방향이며
	모든 것을 객체로 추상화해서 생각하며 각 객체간의 메세지를 통해서 결과를 처리하는 방식이다.
	상속이나 캡슐화, 추상화 개념을 중심으로 발전된 규칙들을 이용하여 코드 간에 서로 관계를 맺어 줌으로써 
	보다 유기적으로 프로그램을 구성한다.
	이런 방식으로 프로그래밍을 하면, 새로운 코드를 작성할 때 기존의 코드를 이용하여 쉽게 작성할 수 있으며,
	코드간의 관계를 이용해서 적은 노력으로 유지 및 보수를 할 수 있다.
	또한 캡슐화를 이용하여 데이터를 보호하고 올바른 값을 유지하도록 하며, 코드의 중복을 제거하여 코드의 불일치로 인한 오동작을 방지 할 수 있다.
	
	요약하자면 기존의 코드를 이용하여 새로운 코드를 작성할 수 있어 코드의 재사용성이 높고,
	코드간의 관계를 맺어줌으로써 적은 노력으로 코드의 관리가 용이하며, 제어자와 메서드를 이용 데이터를 보호하고 올바른 값이 유지하도록 하며
	코드의 중복을 제거하여 코드의 불일치로 인한 오동작을 방지할 수 있기 때문에 신뢰성이 높은 프로그래밍이 가능하다.
	
2. Object(객체)
	-식별성 +상태 + 행위로 이루어짐
	식별성 : 같은 상태를 가지더라도 구분할 수 있다. 개수에 제한이 없다.
	상태 : 객체가 가질 수 있는 조건, 항상변화함, 일반적으로 시간, 행위에 의해 변함
	행위 : 객체가 할 수 있는 메세지의 집합
	즉 객체는 속성과 기능의 집합이라고 볼 수 있음
	- 현실세계에 존재하는 물리적, 개념적인 모든 것이 객체
	- 프로그래밍에서의 객체는 클래스에 정의된 내용대로 메모리에 생성된 것을 뜻함
	
3. Class(클래스)
	-공통된 특성(속성), 행위, 관계, 의미를 갖는 객체의 모임
	-현실에 존재하는 객체들이 가질수 있는 상태와 행동들에 대해 추상화 하여 시스템상에 소프트웨어적으로 표현한 것
	-class는 application과 bean으로 분류
	application : main 메소드를 실행하는 클래스
	bean : object modeling, main이 없는 클래스, 현실세계를 표현
	
4. abstraction(추상화)
	-공통적인, 일반적인 것들의 상태/행위를 추출하여 묶는 것
	-문제영역에 의존적임
	-객체지향의 추상화를 이용 System을 모델링 할 수 있음
	-하나의 객체를 미완성으로 완료하여, 상속을 통해서 상속받은 클래스에 의해서 완성될 수 있으며,
	상속받는 여러개의 클래스에서 꼭 필요하지만 자손마다 구현방법이 다를 때 클래스를 작성하는데 도움을 줄 목적으로 사용
	
5. Generalization(일반화)/Inheritance(상속)
	-~is a 관계 성립( 하위는 상위가 사용되는 곳에 사용가능 : 다형성)
	-속성과 행위의 공유
	
6. Specialization(구체적)
	-추상화 상태를 상속을 통하여 좀 더 구체적인 형태로 발전시키는 과정을 뜻함
	
7. Realization
	- 추상화형태의 객체를 상속하여 자신이 사용하고자 하는 구현방법에 맞게 오버라이딩 하여
	내용을 완성되어진 것을 의미
	- 추상화 된 것의 구현 a ------>b
	-인터페이스의 추상메소드를 오버라이딩을 통해 완성시킴
	
8. Association(연관성)
	-has a관계 a->b 계속 가지고 다니는 관계
	-예를 들어 사람을 객체화할 때 팔과 다리라는 객체를 갖고있는 것
	
9. dependency(의존성)
	-한번 사용하고 버리는 관계 A------->b
	-필요할때 인스턴스를 생성하여 사용
	-예를 들어 사람을 객체화 하였을 때 야구를 할때만 배트 객체를 생성하여 사용하고 버리는 것
	
10. Polymorphism(다형성)
	-동일한 인터페이스를 사용할 수 있도록 한다.
	-구현언어(method overloading / overriding / 상위 class가 사용되는 곳에서는 하위 class가 사용 될 수 있다.)
	-한 타입의 참조변수로 여러 타입의 객체를 참조할 수 있도록 함으로써 다형성을 프로그램적으로 구현
	-메소드(함수) 다중 정의와 메소드 재정의를 제공
	-조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조할 수 있도록 함
	 
11. Encapuslation (캡슐화)/ 정차은익/ 정보은익
	-공개적인 interface두로 구현을 숨긴다.
	-구현을 숨기는 절차 은익(client(사용자)에게는 사용방법만 open한다.)
	-객체의 정보를 숨기는 information hiding(객체의 중요한 정보는 open하지 않는다.)
	-ex) get~~()메소드